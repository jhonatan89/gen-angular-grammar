[%
   import "../../../../utils.egl";
   var modelPath = getRoutePathNested(component.modelData.name); 
%]
import { Injectable } from '@angular/core';
import { HttpHeaders, HttpClient, HttpParams } from '@angular/common/http';
import { Observable } from 'rxjs/Observable';
import { [%=component.modelData.name.firstToUpperCase()%]Model } from './[%=modelPath%].model';
import { Locator[%=component.name.firstToUpperCase()%]Service } from './[%=getRoutePathNested(component.name)%]-locator.service';
import 'rxjs/add/operator/map';
import 'rxjs/add/operator/catch';
import 'rxjs/add/observable/throw';


@Injectable()
export class [%=component.name.firstToUpperCase()%]Service {

  private headers: HttpHeaders;
  constructor(private http: HttpClient, private urlService: Locator[%=component.name.firstToUpperCase()%]Service) {
    this.headers = new HttpHeaders({ 'Content-Type': 'application/json', 'Accept': 'application/json, text/plain'});
  }

  [%if(component.create <> null){%]
  [%=component.create.name.firstToLowerCase()%]([%=component.modelData.name.toLowerCase()%]:[%=component.modelData.name.firstToUpperCase()%]Model){
    let body = JSON.stringify([%=component.modelData.name.toLowerCase()%]);
    return this.http.post(this.urlService.getUrlCreate(), body, { headers: this.headers})
      .catch(this.handleError);
  }
  [%}%]
	
  [%if(component.update <> null){%]
  [%=component.update.name.firstToLowerCase()%]([%=component.modelData.name.toLowerCase()%]:[%=component.modelData.name.firstToUpperCase()%]Model){
    let body = JSON.stringify([%=component.modelData.name.toLowerCase()%]); 
    return this.http.put(this.urlService.getUrlUpdate(), body, { headers: this.headers})
    .catch(this.handleError);
  }
  [%}%]

  [%if(component.list <> null){%]
  [%=component.list.name.firstToLowerCase()%](start: number, limit: number, query?: string){
    let params = new HttpParams().set('offset', start.toString());
    params = params.append('limit', limit.toString());
    return this.http.get(this.urlService.getUrlList(),{params : params})
    .catch(this.handleError)  
  }
  [%}%]
  
  [%if(component.get <> null){%]
  [%=component.get.name.firstToLowerCase()%](id: number){
    return this.http.get(this.urlService.getUrlGetItem() + '/' + id)
    .catch(this.handleError)
  }
  [%}%]

  [%if(component.get <> null){%]
  [%=component.listNum.name.firstToLowerCase()%](){
     return this.http.get(this.urlService.getUrlListNum())
     .catch(this.handleError)
  }
  [%}%]
  
  [%if(component.deleteItem <> null){%]	
  [%=component.deleteItem.name.firstToLowerCase()%](id: number){
    return this.http.delete(this.urlService.getUrlDeleteItem() + '/' + id, { headers: this.headers})
    .catch(this.handleError)
  }
 [%}%]

  private handleError(error: Response){ 
    return Observable.throw(error.statusText || 'Server error');
  }


}
